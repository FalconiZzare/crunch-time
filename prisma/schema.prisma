generator client {
  provider        = "prisma-client-js"
  output          = "generated/prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum UserRole {
  customer
  chef
  delivery
  admin
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          UserRole? @default(customer)

  sessions   Session[]
  accounts   Account[]
  passkeys   Passkey[]
  profiles   Profile[]
  orders     Order[]
  deliveries DeliveryPerson[]
  payments   Payment[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passkey")
}

model Profile {
  id      String @id @default(cuid())
  userId  String @unique
  address String
  phone   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Order {
  id                    String   @id @default(cuid())
  userId                String
  deliveryPersonId      String?
  totalPrice            Int
  deliveryCharge        Int
  deliveryLocation      String
  paymentStatus         String
  estimatedDeliveryTime DateTime

  trackings Tracking[]
  payments  Payment[]
  carts     OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("order")
}

model Dish {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Int
  image       String
  type        String
  inStock     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dish")
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  dishId   String
  quantity Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, dishId])
  @@map("item")
}

model Tracking {
  id              String @id @default(cuid())
  orderId         String @unique
  orderStatus     String
  preparingStatus String
  deliveryStatus  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("tracking")
}

model DeliveryPerson {
  id             String @id @default(cuid())
  userId         String @unique
  vehicleType    String
  vehicleLicense String
  driverLicense  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("delivery")
}

model Payment {
  id             String    @id @default(cuid())
  orderId        String    @unique
  userId         String
  amount         Int
  status         String    @default("unpaid")
  processingTime DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment")
}
